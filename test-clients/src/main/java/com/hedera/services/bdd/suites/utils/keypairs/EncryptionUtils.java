package com.hedera.services.bdd.suites.utils.keypairs;

/*-
 * ‌
 * Hedera Services Test Clients
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import net.i2p.crypto.eddsa.EdDSAPrivateKey;
import net.i2p.crypto.eddsa.EdDSAPublicKey;
import net.i2p.crypto.eddsa.spec.EdDSANamedCurveTable;
import net.i2p.crypto.eddsa.spec.EdDSAParameterSpec;
import net.i2p.crypto.eddsa.spec.EdDSAPrivateKeySpec;
import net.i2p.crypto.eddsa.spec.EdDSAPublicKeySpec;
import org.bouncycastle.util.encoders.Hex;

import java.security.KeyPair;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;

public class EncryptionUtils {
	/**
	 * Build a KeyPair from Ed25519PrivateKey
	 *
	 * @param ed25519PrivateKey
	 * 		given Ed25519 private key
	 * @return a key pair built from the given private key
	 */
	public static KeyPair buildKeyPairFromMainnetPrivateKey(final Ed25519PrivateKey ed25519PrivateKey) {
		return buildKeyPairFromMainnetPriKeyEncHex(ed25519PrivateKey.toString());
	}

	/**
	 * Build a KeyPair from a private key encoded hex string generated by hedera key-gen tool
	 *
	 * @param priKeyEncHex
	 * 		private key string in its encoded hex format
	 * @return a key pair built from the given encoded hex string
	 */
	private static KeyPair buildKeyPairFromMainnetPriKeyEncHex(final String priKeyEncHex) {
		byte[] privateKeyBytes = Hex.decode(priKeyEncHex);
		EdDSAPrivateKey privateKey;
		EdDSAPublicKey publicKey;
		try {
			// try encoded first
			final PKCS8EncodedKeySpec encodedPrivKey = new PKCS8EncodedKeySpec(privateKeyBytes);
			privateKey = new EdDSAPrivateKey(encodedPrivKey);
		} catch (InvalidKeySpecException e) {
			// key is invalid (likely not encoded)
			// try non encoded
			final EdDSAPrivateKeySpec privKey =
					new EdDSAPrivateKeySpec(privateKeyBytes, EdDSANamedCurveTable.ED_25519_CURVE_SPEC);
			privateKey = new EdDSAPrivateKey(privKey);
		}

		EdDSAParameterSpec spec = EdDSANamedCurveTable.getByName(EdDSANamedCurveTable.ED_25519);

		publicKey = new EdDSAPublicKey(
				new EdDSAPublicKeySpec(privateKey.getAbyte(), spec));
		return new KeyPair(publicKey, privateKey);
	}

}
